/* ************************************************************************** */
/* 
 * ファイル名           failsafe.h
 * コンポーネント名     フェールセーフ
 * 説明                 フェールセーフ処理
 * 会社名               パーソルエクセルHRパートナーズ（株）
 * 作成日               2023/12/12
 * 作成者               高根
  */
/* ************************************************************************** */
#ifndef __FAILSAFE_H
#define __FAILSAFE_H
/* ************************************************************************** */
/* pragma定義                                                                 */
/* ************************************************************************** */


/* ************************************************************************** */
/* include(システムヘッダ)                                                    */
/* ************************************************************************** */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

/* ************************************************************************** */
/* include(ユーザ定義ヘッダ)                                                  */
/* ************************************************************************** */
//#include "process.h"
//#include "resource.h"
#include "com_fs.h"

/* ************************************************************************** */
/* マクロ定義                                                                 */
/* ************************************************************************** */
#define DEF_FS_FALSE	(-1)									/* 失敗 */
#define DEF_FS_TRUE		(0)										/* 成功 */
#define DEF_FS_TIMER_KIND	(6)									/* タイマID */
#define DEF_FS_MONIT_CYCLE	(10)								/* 監視周期 */
#define DEF_FS_WATCH_CYCLE	(10)								/* 判定周期 */
#define DEF_FS_SAFE		(0)										/* 無故障 */
#define DEF_FS_FAIL_NOW	(1)										/* 現在故障 */
#define DEF_FS_FAIL_PAST	(2)									/* 過去故障 */

/* ************************************************************************** */
/* typedef 定義                                                               */
/* ************************************************************************** */


/* ************************************************************************** */
/* enum定義                                                                   */
/* ************************************************************************** */
#if 0
	/* エラーコード */
	typedef enum{
		ENUM_FS_PROC = 1,											/* プロセス異常 */
		ENUM_FS_CPU1 = 2,											/* CPU負荷異常1 */
		ENUM_FS_CPU2 = 3,											/* CPU負荷異常2 */
		ENUM_FS_CPU3 = 4,											/* CPU負荷異常3 */
		ENUM_FS_CPU4 = 5,											/* CPU負荷異常4 */
		ENUM_FS_CPU5 = 6,											/* CPU負荷異常5 */
		ENUM_FS_CPU6 = 7,											/* CPU負荷異常6 */
		ENUM_FS_CPU7 = 8,											/* CPU負荷異常7 */
		ENUM_FS_CPU8 = 9,											/* CPU負荷異常8 */
		ENUM_FS_CPU9 = 10,											/* CPU負荷異常9 */
		ENUM_FS_CPU10 = 11,											/* CPU負荷異常10 */
		ENUM_FS_CPU11 = 12,											/* CPU負荷異常11 */
		ENUM_FS_CPU12 = 13,											/* CPU負荷異常12 */
		ENUM_FS_CPU13 = 14,											/* CPU負荷異常13 */
		ENUM_FS_MEM = 15,											/* メモリ使用量異常 */
		ENUM_FS_DISK = 16,											/* ディスク使用量異常 */
		ENUM_FS_THERM = 17,											/* CPU温度異常 */
		ENUM_FS_CAMERA = 18,										/* カメラ通信異常 */
		ENUM_FS_ALTITUDE = 19,										/* 高度計通信異常 */
		ENUM_FS_GNSS_TAKION = 20,									/* GNSS(Takion)通信異常 */
		ENUM_FS_INS = 21,											/* INS通信異常 */
		ENUM_FS_IMU = 22,											/* IMU通信異常 */
		ENUM_FS_WIFI = 23,											/* Wifi通信異常 */
		ENUM_FS_ATM_PRESSURE = 24,									/* 大気圧計通信異常 */
		ENUM_FS_ECU_JETSON = 25,									/* ECU(NVIDIA)通信異常 */
		ENUM_FS_MAG = 26,											/* 磁気センサ通信異常 */
		ENUM_FS_ECU = 27,											/* ECU通信異常 */
	}ENUM_FS_ERRCODE;


	/* ************************************************************************** */
	/* struct/union定義                                                           */
	/* ************************************************************************** */
	/* 故障管理情報 */
	typedef struct{
		int32_t				proc;									/* プロセス異常 */
		int32_t				cpu_load[DEF_CPU_NUM+1];				/* CPU負荷異常 */
		int32_t				mem;									/* メモリ使用量異常 */
		int32_t				disk;									/* ディスク使用率異常 */
		int32_t				cpu_therm;								/* CPU温度異常 */
		int32_t				camera;									/* カメラ通信異常 */
		int32_t				altitude;								/* 高度通信異常 */
		int32_t				gnss_takion;							/* GNSS(Takion)通信異常 */
		int32_t				ins;									/* INS通信異常 */
		int32_t				imu;									/* IMU通信異常 */
		int32_t				wifi;									/* Wifi通信異常 */
		int32_t				atm_pressure;							/* 大気圧計通信異常 */
		int32_t				ecu_jetson;								/* ECU(NVIDIA)通信異常 */
		int32_t				mag;									/* 磁気センサ通信異常 */
		int32_t				ecu;									/* ECU通信異常 */
	}failsafeInfo;
#endif

/* 故障管理一覧表 */
typedef struct{
	ENUM_FS_ERRCODE		errcode;								/* エラーコード */
	char				shmname[68];							/* リソース値が書き込まれている共有メモリ名 */
	void*				resDataInfo;							/* リソース値を格納する構造体 */
	uint32_t			size;									/* 共有メモリからの読み込みサイズ */
	int32_t*			thresh;									/* 故障閾値 */
	int32_t*			resData;								/* リソース値 */
	int32_t*			data;									/* 故障レベル */
//	int*				isstart;								
}failsafeTable;




/* ************************************************************************** */
/* extern 変数宣言                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/* プロトタイプ宣言(公開関数)                                                 */
/* ************************************************************************** */
extern void* FailsafeMain(void* arg);


#endif /* __FAILSAFE_H */
